2023-02-08 13:55:06,516 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2060
CUDA_HOME: D:\Anaconda\envs\py39
NVCC: Cuda compilation tools, release 11.7, V11.7.99
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.29.30139 版
GCC: n/a
PyTorch: 1.13.1
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 11.7
MMDetection: 2.28.0+
------------------------------------------------------------

2023-02-08 13:55:06,767 - mmdet - INFO - Distributed training: False
2023-02-08 13:55:06,969 - mmdet - INFO - Config:
model = dict(
    type='MaskRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=None),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = 'balloon'
CLASSES = ('balloon', )
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='balloon/train/coco.json',
        img_prefix='balloon/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='balloon/val/coco.json',
        img_prefix='balloon/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='balloon/val/coco.json',
        img_prefix='balloon/val/coco.json',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(metric=['bbox', 'segm'])
optimizer = dict(type='SGD', lr=0.0008, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=5,
    warmup_ratio=0.0001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=3)
log_config = dict(interval=3, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
auto_scale_lr = dict(enable=False, base_batch_size=16)
work_dir = './work_dirs\mask_rcnn_r50_fpn_1x_coco'
auto_resume = False
gpu_ids = range(0, 1)

2023-02-08 13:55:07,092 - mmdet - INFO - Set random seed to 1108740230, deterministic: False
2023-02-08 13:55:07,370 - mmdet - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-08 13:55:07,560 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,561 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,562 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,564 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,565 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,566 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,568 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,570 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,571 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,572 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,574 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,576 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,577 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,581 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,584 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,587 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2023-02-08 13:55:07,602 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-02-08 13:55:07,619 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-02-08 13:55:07,622 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2023-02-08 13:55:07,962 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-02-08 13:55:07,967 - mmdet - INFO - load checkpoint from local path: mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth
2023-02-08 13:55:08,134 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([2, 1024]).
size mismatch for roi_head.bbox_head.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.fc_reg.weight: copying a param with shape torch.Size([320, 1024]) from checkpoint, the shape in current model is torch.Size([4, 1024]).
size mismatch for roi_head.bbox_head.fc_reg.bias: copying a param with shape torch.Size([320]) from checkpoint, the shape in current model is torch.Size([4]).
size mismatch for roi_head.mask_head.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for roi_head.mask_head.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([1]).
2023-02-08 13:55:08,146 - mmdet - INFO - Start running, host: load@LAPTOP-GAQB0LKG, work_dir: C:\Users\load\work_dirs\mask_rcnn_r50_fpn_1x_coco
2023-02-08 13:55:08,146 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-08 13:55:08,147 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2023-02-08 13:55:08,147 - mmdet - INFO - Checkpoints will be saved to C:\Users\load\work_dirs\mask_rcnn_r50_fpn_1x_coco by HardDiskBackend.
2023-02-08 13:55:21,942 - mmdet - INFO - Epoch [1][3/31]	lr: 3.200e-04, eta: 0:27:45, time: 4.515, data_time: 2.962, memory: 3507, loss_rpn_cls: 0.1987, loss_rpn_bbox: 0.0321, loss_cls: 0.5764, acc: 86.5885, loss_bbox: 0.2091, loss_mask: 9.0109, loss: 10.0271
2023-02-08 13:55:23,849 - mmdet - INFO - Epoch [1][6/31]	lr: 8.000e-04, eta: 0:15:37, time: 0.611, data_time: 0.090, memory: 3507, loss_rpn_cls: 0.0212, loss_rpn_bbox: 0.0076, loss_cls: 0.5152, acc: 88.1836, loss_bbox: 0.2411, loss_mask: 3.1333, loss: 3.9184
2023-02-08 13:55:25,759 - mmdet - INFO - Epoch [1][9/31]	lr: 8.000e-04, eta: 0:11:37, time: 0.638, data_time: 0.114, memory: 3507, loss_rpn_cls: 0.0352, loss_rpn_bbox: 0.0059, loss_cls: 0.2838, acc: 96.9076, loss_bbox: 0.1084, loss_mask: 0.7529, loss: 1.1863
2023-02-08 13:55:27,906 - mmdet - INFO - Epoch [1][12/31]	lr: 8.000e-04, eta: 0:09:43, time: 0.717, data_time: 0.119, memory: 3773, loss_rpn_cls: 0.0433, loss_rpn_bbox: 0.0255, loss_cls: 0.3709, acc: 85.1237, loss_bbox: 0.5310, loss_mask: 0.6646, loss: 1.6353
2023-02-08 13:55:29,813 - mmdet - INFO - Epoch [1][15/31]	lr: 8.000e-04, eta: 0:08:28, time: 0.641, data_time: 0.114, memory: 3773, loss_rpn_cls: 0.0284, loss_rpn_bbox: 0.0131, loss_cls: 0.2239, acc: 92.7083, loss_bbox: 0.2557, loss_mask: 0.6186, loss: 1.1398
2023-02-08 13:55:32,245 - mmdet - INFO - Epoch [1][18/31]	lr: 8.000e-04, eta: 0:07:47, time: 0.797, data_time: 0.114, memory: 3810, loss_rpn_cls: 0.1007, loss_rpn_bbox: 0.0289, loss_cls: 0.3479, acc: 86.4909, loss_bbox: 0.5087, loss_mask: 0.4534, loss: 1.4396
2023-02-08 13:55:34,431 - mmdet - INFO - Epoch [1][21/31]	lr: 8.000e-04, eta: 0:07:13, time: 0.722, data_time: 0.123, memory: 3810, loss_rpn_cls: 0.0200, loss_rpn_bbox: 0.0139, loss_cls: 0.2525, acc: 90.3646, loss_bbox: 0.3939, loss_mask: 0.3105, loss: 0.9908
2023-02-08 13:55:36,785 - mmdet - INFO - Epoch [1][24/31]	lr: 8.000e-04, eta: 0:06:49, time: 0.783, data_time: 0.136, memory: 3810, loss_rpn_cls: 0.0625, loss_rpn_bbox: 0.0258, loss_cls: 0.2482, acc: 90.2018, loss_bbox: 0.3553, loss_mask: 0.4342, loss: 1.1259
2023-02-08 13:55:39,409 - mmdet - INFO - Epoch [1][27/31]	lr: 8.000e-04, eta: 0:06:33, time: 0.844, data_time: 0.133, memory: 3810, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0143, loss_cls: 0.1983, acc: 91.8294, loss_bbox: 0.2789, loss_mask: 0.2365, loss: 0.7536
2023-02-08 13:55:41,448 - mmdet - INFO - Epoch [1][30/31]	lr: 8.000e-04, eta: 0:06:15, time: 0.726, data_time: 0.164, memory: 3810, loss_rpn_cls: 0.0259, loss_rpn_bbox: 0.0216, loss_cls: 0.2382, acc: 89.4206, loss_bbox: 0.3882, loss_mask: 0.2811, loss: 0.9552
2023-02-08 13:55:57,158 - mmdet - INFO - Evaluating bbox...
2023-02-08 13:55:57,270 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.446
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.668
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.520
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.387
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.515
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.606
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.606
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.606
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.542
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.661

2023-02-08 13:55:57,270 - mmdet - INFO - Evaluating segm...
2023-02-08 13:55:57,491 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.567
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.665
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.661
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.368
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.667
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.800

2023-02-08 13:55:57,496 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 13:55:57,496 - mmdet - INFO - Epoch(val) [1][13]	bbox_mAP: 0.4462, bbox_mAP_50: 0.6682, bbox_mAP_75: 0.5204, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.3866, bbox_mAP_l: 0.5147, bbox_mAP_copypaste: 0.4462 0.6682 0.5204 0.0000 0.3866 0.5147, segm_mAP: 0.5669, segm_mAP_50: 0.6649, segm_mAP_75: 0.6609, segm_mAP_s: 0.0000, segm_mAP_m: 0.3682, segm_mAP_l: 0.6591, segm_mAP_copypaste: 0.5669 0.6649 0.6609 0.0000 0.3682 0.6591
2023-02-08 13:56:08,487 - mmdet - INFO - Epoch [2][3/31]	lr: 8.000e-04, eta: 0:07:13, time: 3.551, data_time: 2.853, memory: 3952, loss_rpn_cls: 0.0321, loss_rpn_bbox: 0.0230, loss_cls: 0.2374, acc: 87.3698, loss_bbox: 0.4351, loss_mask: 0.2520, loss: 0.9796
2023-02-08 13:56:10,501 - mmdet - INFO - Epoch [2][6/31]	lr: 8.000e-04, eta: 0:06:53, time: 0.676, data_time: 0.120, memory: 3952, loss_rpn_cls: 0.0304, loss_rpn_bbox: 0.0106, loss_cls: 0.1320, acc: 94.4010, loss_bbox: 0.1789, loss_mask: 0.1425, loss: 0.4945
2023-02-08 13:56:12,582 - mmdet - INFO - Epoch [2][9/31]	lr: 8.000e-04, eta: 0:06:36, time: 0.693, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0337, loss_rpn_bbox: 0.0214, loss_cls: 0.2472, acc: 85.8398, loss_bbox: 0.5070, loss_mask: 0.2087, loss: 1.0179
2023-02-08 13:56:14,794 - mmdet - INFO - Epoch [2][12/31]	lr: 8.000e-04, eta: 0:06:21, time: 0.723, data_time: 0.116, memory: 3952, loss_rpn_cls: 0.0479, loss_rpn_bbox: 0.0081, loss_cls: 0.1571, acc: 92.3828, loss_bbox: 0.2701, loss_mask: 0.1549, loss: 0.6381
2023-02-08 13:56:16,752 - mmdet - INFO - Epoch [2][15/31]	lr: 8.000e-04, eta: 0:06:07, time: 0.667, data_time: 0.131, memory: 3952, loss_rpn_cls: 0.0275, loss_rpn_bbox: 0.0175, loss_cls: 0.1400, acc: 92.7409, loss_bbox: 0.2541, loss_mask: 0.1413, loss: 0.5804
2023-02-08 13:56:18,706 - mmdet - INFO - Epoch [2][18/31]	lr: 8.000e-04, eta: 0:05:55, time: 0.651, data_time: 0.117, memory: 3952, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0126, loss_cls: 0.1555, acc: 92.3177, loss_bbox: 0.2734, loss_mask: 0.0969, loss: 0.5569
2023-02-08 13:56:20,835 - mmdet - INFO - Epoch [2][21/31]	lr: 8.000e-04, eta: 0:05:44, time: 0.707, data_time: 0.129, memory: 3952, loss_rpn_cls: 0.0264, loss_rpn_bbox: 0.0346, loss_cls: 0.2452, acc: 86.7188, loss_bbox: 0.4852, loss_mask: 0.1539, loss: 0.9453
2023-02-08 13:56:22,886 - mmdet - INFO - Epoch [2][24/31]	lr: 8.000e-04, eta: 0:05:34, time: 0.685, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0185, loss_rpn_bbox: 0.0130, loss_cls: 0.1789, acc: 90.9831, loss_bbox: 0.3586, loss_mask: 0.1095, loss: 0.6784
2023-02-08 13:56:24,921 - mmdet - INFO - Epoch [2][27/31]	lr: 8.000e-04, eta: 0:05:25, time: 0.677, data_time: 0.116, memory: 3952, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0052, loss_cls: 0.1297, acc: 94.2383, loss_bbox: 0.2707, loss_mask: 0.1236, loss: 0.5462
2023-02-08 13:56:26,987 - mmdet - INFO - Epoch [2][30/31]	lr: 8.000e-04, eta: 0:05:16, time: 0.690, data_time: 0.118, memory: 3952, loss_rpn_cls: 0.0110, loss_rpn_bbox: 0.0079, loss_cls: 0.1839, acc: 93.1966, loss_bbox: 0.4302, loss_mask: 0.1687, loss: 0.8016
2023-02-08 13:56:40,646 - mmdet - INFO - Evaluating bbox...
2023-02-08 13:56:40,728 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.585
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.752
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.712
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.003
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.468
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.656
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.708
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.708
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.708
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.100
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.608
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.775

2023-02-08 13:56:40,729 - mmdet - INFO - Evaluating segm...
2023-02-08 13:56:40,841 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.657
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.751
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.730
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.010
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.472
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.748
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.450
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.675
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.850

2023-02-08 13:56:40,844 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 13:56:40,845 - mmdet - INFO - Epoch(val) [2][13]	bbox_mAP: 0.5854, bbox_mAP_50: 0.7517, bbox_mAP_75: 0.7116, bbox_mAP_s: 0.0035, bbox_mAP_m: 0.4680, bbox_mAP_l: 0.6559, bbox_mAP_copypaste: 0.5854 0.7517 0.7116 0.0035 0.4680 0.6559, segm_mAP: 0.6570, segm_mAP_50: 0.7508, segm_mAP_75: 0.7295, segm_mAP_s: 0.0099, segm_mAP_m: 0.4723, segm_mAP_l: 0.7485, segm_mAP_copypaste: 0.6570 0.7508 0.7295 0.0099 0.4723 0.7485
2023-02-08 13:56:51,596 - mmdet - INFO - Epoch [3][3/31]	lr: 8.000e-04, eta: 0:05:42, time: 3.472, data_time: 2.796, memory: 3952, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0099, loss_cls: 0.1146, acc: 94.4336, loss_bbox: 0.2384, loss_mask: 0.1231, loss: 0.4944
2023-02-08 13:56:53,701 - mmdet - INFO - Epoch [3][6/31]	lr: 8.000e-04, eta: 0:05:33, time: 0.700, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0047, loss_cls: 0.1382, acc: 94.4661, loss_bbox: 0.3528, loss_mask: 0.2220, loss: 0.7273
2023-02-08 13:56:55,870 - mmdet - INFO - Epoch [3][9/31]	lr: 8.000e-04, eta: 0:05:25, time: 0.717, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0143, loss_rpn_bbox: 0.0132, loss_cls: 0.1671, acc: 93.6523, loss_bbox: 0.4254, loss_mask: 0.1471, loss: 0.7673
2023-02-08 13:56:57,956 - mmdet - INFO - Epoch [3][12/31]	lr: 8.000e-04, eta: 0:05:17, time: 0.686, data_time: 0.132, memory: 3952, loss_rpn_cls: 0.0314, loss_rpn_bbox: 0.0197, loss_cls: 0.1203, acc: 95.5078, loss_bbox: 0.2783, loss_mask: 0.1246, loss: 0.5742
2023-02-08 13:57:00,512 - mmdet - INFO - Epoch [3][15/31]	lr: 8.000e-04, eta: 0:05:11, time: 0.853, data_time: 0.138, memory: 3952, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0084, loss_cls: 0.1124, acc: 95.0846, loss_bbox: 0.2728, loss_mask: 0.1172, loss: 0.5258
2023-02-08 13:57:02,723 - mmdet - INFO - Epoch [3][18/31]	lr: 8.000e-04, eta: 0:05:05, time: 0.730, data_time: 0.136, memory: 3952, loss_rpn_cls: 0.0187, loss_rpn_bbox: 0.0101, loss_cls: 0.1017, acc: 96.1263, loss_bbox: 0.2321, loss_mask: 0.1052, loss: 0.4679
2023-02-08 13:57:05,430 - mmdet - INFO - Epoch [3][21/31]	lr: 8.000e-04, eta: 0:05:00, time: 0.926, data_time: 0.151, memory: 3952, loss_rpn_cls: 0.0184, loss_rpn_bbox: 0.0214, loss_cls: 0.1340, acc: 94.6289, loss_bbox: 0.3181, loss_mask: 0.1483, loss: 0.6403
2023-02-08 13:57:07,628 - mmdet - INFO - Epoch [3][24/31]	lr: 8.000e-04, eta: 0:04:54, time: 0.742, data_time: 0.123, memory: 3952, loss_rpn_cls: 0.0145, loss_rpn_bbox: 0.0100, loss_cls: 0.1020, acc: 96.7122, loss_bbox: 0.2843, loss_mask: 0.0774, loss: 0.4882
2023-02-08 13:57:09,915 - mmdet - INFO - Epoch [3][27/31]	lr: 8.000e-04, eta: 0:04:48, time: 0.755, data_time: 0.120, memory: 3952, loss_rpn_cls: 0.0307, loss_rpn_bbox: 0.0192, loss_cls: 0.1649, acc: 93.8151, loss_bbox: 0.3935, loss_mask: 0.1754, loss: 0.7837
2023-02-08 13:57:12,005 - mmdet - INFO - Epoch [3][30/31]	lr: 8.000e-04, eta: 0:04:43, time: 0.704, data_time: 0.117, memory: 3952, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0066, loss_cls: 0.0920, acc: 96.9401, loss_bbox: 0.2702, loss_mask: 0.0697, loss: 0.4463
2023-02-08 13:57:12,917 - mmdet - INFO - Saving checkpoint at 3 epochs
2023-02-08 13:57:27,623 - mmdet - INFO - Evaluating bbox...
2023-02-08 13:57:27,699 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.625
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.781
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.736
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.004
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.497
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.698
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.726
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.726
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.726
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.050
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.633
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.794

2023-02-08 13:57:27,700 - mmdet - INFO - Evaluating segm...
2023-02-08 13:57:27,800 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.706
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.778
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.776
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.005
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.511
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.793
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.804
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.804
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.804
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.200
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.872

2023-02-08 13:57:27,803 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 13:57:27,803 - mmdet - INFO - Epoch(val) [3][13]	bbox_mAP: 0.6250, bbox_mAP_50: 0.7808, bbox_mAP_75: 0.7361, bbox_mAP_s: 0.0036, bbox_mAP_m: 0.4966, bbox_mAP_l: 0.6981, bbox_mAP_copypaste: 0.6250 0.7808 0.7361 0.0036 0.4966 0.6981, segm_mAP: 0.7057, segm_mAP_50: 0.7785, segm_mAP_75: 0.7764, segm_mAP_s: 0.0050, segm_mAP_m: 0.5111, segm_mAP_l: 0.7928, segm_mAP_copypaste: 0.7057 0.7785 0.7764 0.0050 0.5111 0.7928
2023-02-08 13:57:39,131 - mmdet - INFO - Epoch [4][3/31]	lr: 8.000e-04, eta: 0:04:58, time: 3.651, data_time: 2.937, memory: 3952, loss_rpn_cls: 0.0198, loss_rpn_bbox: 0.0189, loss_cls: 0.1334, acc: 95.4753, loss_bbox: 0.2969, loss_mask: 0.1703, loss: 0.6393
2023-02-08 13:57:41,304 - mmdet - INFO - Epoch [4][6/31]	lr: 8.000e-04, eta: 0:04:52, time: 0.738, data_time: 0.137, memory: 3952, loss_rpn_cls: 0.0178, loss_rpn_bbox: 0.0175, loss_cls: 0.1099, acc: 96.2565, loss_bbox: 0.2254, loss_mask: 0.0941, loss: 0.4646
2023-02-08 13:57:43,477 - mmdet - INFO - Epoch [4][9/31]	lr: 8.000e-04, eta: 0:04:46, time: 0.720, data_time: 0.122, memory: 3952, loss_rpn_cls: 0.0234, loss_rpn_bbox: 0.0193, loss_cls: 0.1090, acc: 96.8750, loss_bbox: 0.2533, loss_mask: 0.1353, loss: 0.5403
2023-02-08 13:57:45,699 - mmdet - INFO - Epoch [4][12/31]	lr: 8.000e-04, eta: 0:04:41, time: 0.743, data_time: 0.125, memory: 3952, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0084, loss_cls: 0.1106, acc: 96.4518, loss_bbox: 0.2618, loss_mask: 0.1754, loss: 0.5638
2023-02-08 13:57:47,664 - mmdet - INFO - Epoch [4][15/31]	lr: 8.000e-04, eta: 0:04:35, time: 0.655, data_time: 0.117, memory: 3952, loss_rpn_cls: 0.0114, loss_rpn_bbox: 0.0040, loss_cls: 0.0527, acc: 98.2422, loss_bbox: 0.0766, loss_mask: 0.0748, loss: 0.2195
2023-02-08 13:57:49,870 - mmdet - INFO - Epoch [4][18/31]	lr: 8.000e-04, eta: 0:04:29, time: 0.735, data_time: 0.127, memory: 3952, loss_rpn_cls: 0.0173, loss_rpn_bbox: 0.0234, loss_cls: 0.1884, acc: 92.6432, loss_bbox: 0.2786, loss_mask: 0.1515, loss: 0.6592
2023-02-08 13:57:51,966 - mmdet - INFO - Epoch [4][21/31]	lr: 8.000e-04, eta: 0:04:24, time: 0.693, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0037, loss_cls: 0.0560, acc: 97.9818, loss_bbox: 0.0851, loss_mask: 0.0775, loss: 0.2343
2023-02-08 13:57:53,955 - mmdet - INFO - Epoch [4][24/31]	lr: 8.000e-04, eta: 0:04:18, time: 0.670, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0052, loss_cls: 0.0484, acc: 98.1445, loss_bbox: 0.0840, loss_mask: 0.0812, loss: 0.2270
2023-02-08 13:57:56,113 - mmdet - INFO - Epoch [4][27/31]	lr: 8.000e-04, eta: 0:04:14, time: 0.719, data_time: 0.123, memory: 3952, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0101, loss_cls: 0.0657, acc: 97.9818, loss_bbox: 0.1119, loss_mask: 0.1148, loss: 0.3121
2023-02-08 13:57:58,276 - mmdet - INFO - Epoch [4][30/31]	lr: 8.000e-04, eta: 0:04:09, time: 0.727, data_time: 0.121, memory: 3952, loss_rpn_cls: 0.0038, loss_rpn_bbox: 0.0112, loss_cls: 0.0742, acc: 97.4935, loss_bbox: 0.1027, loss_mask: 0.0769, loss: 0.2689
2023-02-08 13:58:11,385 - mmdet - INFO - Evaluating bbox...
2023-02-08 13:58:11,421 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.636
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.800
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.783
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.541
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.703
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.722
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.722
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.722
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.642
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.789

2023-02-08 13:58:11,422 - mmdet - INFO - Evaluating segm...
2023-02-08 13:58:11,465 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.714
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.800
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.800
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.582
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.867

2023-02-08 13:58:11,468 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 13:58:11,468 - mmdet - INFO - Epoch(val) [4][13]	bbox_mAP: 0.6358, bbox_mAP_50: 0.8001, bbox_mAP_75: 0.7835, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.5411, bbox_mAP_l: 0.7031, bbox_mAP_copypaste: 0.6358 0.8001 0.7835 0.0000 0.5411 0.7031, segm_mAP: 0.7144, segm_mAP_50: 0.8001, segm_mAP_75: 0.8001, segm_mAP_s: 0.0000, segm_mAP_m: 0.5819, segm_mAP_l: 0.7923, segm_mAP_copypaste: 0.7144 0.8001 0.8001 0.0000 0.5819 0.7923
2023-02-08 13:58:22,880 - mmdet - INFO - Epoch [5][3/31]	lr: 8.000e-04, eta: 0:04:18, time: 3.692, data_time: 3.046, memory: 3952, loss_rpn_cls: 0.0125, loss_rpn_bbox: 0.0159, loss_cls: 0.0651, acc: 98.0794, loss_bbox: 0.0973, loss_mask: 0.0961, loss: 0.2870
2023-02-08 13:58:25,015 - mmdet - INFO - Epoch [5][6/31]	lr: 8.000e-04, eta: 0:04:13, time: 0.710, data_time: 0.117, memory: 3952, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0106, loss_cls: 0.0722, acc: 97.2656, loss_bbox: 0.1165, loss_mask: 0.1499, loss: 0.3620
2023-02-08 13:58:27,088 - mmdet - INFO - Epoch [5][9/31]	lr: 8.000e-04, eta: 0:04:08, time: 0.692, data_time: 0.120, memory: 3952, loss_rpn_cls: 0.0031, loss_rpn_bbox: 0.0135, loss_cls: 0.0549, acc: 98.0794, loss_bbox: 0.0933, loss_mask: 0.0913, loss: 0.2562
2023-02-08 13:58:29,257 - mmdet - INFO - Epoch [5][12/31]	lr: 8.000e-04, eta: 0:04:03, time: 0.722, data_time: 0.121, memory: 3952, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0121, loss_cls: 0.0857, acc: 96.8099, loss_bbox: 0.1756, loss_mask: 0.1043, loss: 0.3886
2023-02-08 13:58:31,398 - mmdet - INFO - Epoch [5][15/31]	lr: 8.000e-04, eta: 0:03:59, time: 0.710, data_time: 0.125, memory: 3952, loss_rpn_cls: 0.0045, loss_rpn_bbox: 0.0117, loss_cls: 0.1084, acc: 96.0612, loss_bbox: 0.1583, loss_mask: 0.1358, loss: 0.4187
2023-02-08 13:58:33,512 - mmdet - INFO - Epoch [5][18/31]	lr: 8.000e-04, eta: 0:03:54, time: 0.706, data_time: 0.123, memory: 3952, loss_rpn_cls: 0.0075, loss_rpn_bbox: 0.0107, loss_cls: 0.0691, acc: 97.5586, loss_bbox: 0.0974, loss_mask: 0.0986, loss: 0.2833
2023-02-08 13:58:35,561 - mmdet - INFO - Epoch [5][21/31]	lr: 8.000e-04, eta: 0:03:49, time: 0.682, data_time: 0.121, memory: 3952, loss_rpn_cls: 0.0297, loss_rpn_bbox: 0.0043, loss_cls: 0.0394, acc: 98.7630, loss_bbox: 0.0552, loss_mask: 0.0597, loss: 0.1884
2023-02-08 13:58:37,563 - mmdet - INFO - Epoch [5][24/31]	lr: 8.000e-04, eta: 0:03:45, time: 0.679, data_time: 0.122, memory: 3952, loss_rpn_cls: 0.0018, loss_rpn_bbox: 0.0054, loss_cls: 0.0632, acc: 97.4935, loss_bbox: 0.0704, loss_mask: 0.0712, loss: 0.2121
2023-02-08 13:58:39,813 - mmdet - INFO - Epoch [5][27/31]	lr: 8.000e-04, eta: 0:03:41, time: 0.749, data_time: 0.120, memory: 3952, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0251, loss_cls: 0.1510, acc: 93.6523, loss_bbox: 0.2528, loss_mask: 0.1158, loss: 0.5573
2023-02-08 13:58:42,076 - mmdet - INFO - Epoch [5][30/31]	lr: 8.000e-04, eta: 0:03:37, time: 0.755, data_time: 0.118, memory: 3952, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0143, loss_cls: 0.1241, acc: 95.3776, loss_bbox: 0.1780, loss_mask: 0.1660, loss: 0.4933
2023-02-08 13:58:53,348 - mmdet - INFO - Evaluating bbox...
2023-02-08 13:58:53,382 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.672
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.837
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.815
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.582
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.730
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.780
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.780
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.780
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.783
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.822

2023-02-08 13:58:53,383 - mmdet - INFO - Evaluating segm...
2023-02-08 13:58:53,422 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.754
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.835
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.835
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.618
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.825
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.833
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.878

2023-02-08 13:58:53,424 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 13:58:53,425 - mmdet - INFO - Epoch(val) [5][13]	bbox_mAP: 0.6722, bbox_mAP_50: 0.8372, bbox_mAP_75: 0.8150, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.5820, bbox_mAP_l: 0.7297, bbox_mAP_copypaste: 0.6722 0.8372 0.8150 0.0000 0.5820 0.7297, segm_mAP: 0.7539, segm_mAP_50: 0.8346, segm_mAP_75: 0.8346, segm_mAP_s: 0.0000, segm_mAP_m: 0.6178, segm_mAP_l: 0.8247, segm_mAP_copypaste: 0.7539 0.8346 0.8346 0.0000 0.6178 0.8247
2023-02-08 13:59:04,395 - mmdet - INFO - Epoch [6][3/31]	lr: 8.000e-04, eta: 0:03:42, time: 3.546, data_time: 2.907, memory: 3952, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0137, loss_cls: 0.0798, acc: 97.2656, loss_bbox: 0.1237, loss_mask: 0.1152, loss: 0.3444
2023-02-08 13:59:06,574 - mmdet - INFO - Epoch [6][6/31]	lr: 8.000e-04, eta: 0:03:37, time: 0.724, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0153, loss_rpn_bbox: 0.0206, loss_cls: 0.1056, acc: 95.7357, loss_bbox: 0.1533, loss_mask: 0.0975, loss: 0.3922
2023-02-08 13:59:09,017 - mmdet - INFO - Epoch [6][9/31]	lr: 8.000e-04, eta: 0:03:33, time: 0.825, data_time: 0.127, memory: 3952, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0180, loss_cls: 0.1272, acc: 94.4010, loss_bbox: 0.1517, loss_mask: 0.0922, loss: 0.3984
2023-02-08 13:59:11,058 - mmdet - INFO - Epoch [6][12/31]	lr: 8.000e-04, eta: 0:03:29, time: 0.679, data_time: 0.110, memory: 3952, loss_rpn_cls: 0.0102, loss_rpn_bbox: 0.0059, loss_cls: 0.0496, acc: 98.4049, loss_bbox: 0.0789, loss_mask: 0.0832, loss: 0.2279
2023-02-08 13:59:13,041 - mmdet - INFO - Epoch [6][15/31]	lr: 8.000e-04, eta: 0:03:25, time: 0.670, data_time: 0.112, memory: 3952, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0127, loss_cls: 0.0707, acc: 97.2331, loss_bbox: 0.1156, loss_mask: 0.1027, loss: 0.3096
2023-02-08 13:59:15,023 - mmdet - INFO - Epoch [6][18/31]	lr: 8.000e-04, eta: 0:03:20, time: 0.653, data_time: 0.101, memory: 3952, loss_rpn_cls: 0.0013, loss_rpn_bbox: 0.0038, loss_cls: 0.0349, acc: 98.9583, loss_bbox: 0.0558, loss_mask: 0.0741, loss: 0.1699
2023-02-08 13:59:17,083 - mmdet - INFO - Epoch [6][21/31]	lr: 8.000e-04, eta: 0:03:16, time: 0.676, data_time: 0.108, memory: 3952, loss_rpn_cls: 0.0108, loss_rpn_bbox: 0.0031, loss_cls: 0.0568, acc: 98.1120, loss_bbox: 0.0856, loss_mask: 0.0940, loss: 0.2503
2023-02-08 13:59:19,303 - mmdet - INFO - Epoch [6][24/31]	lr: 8.000e-04, eta: 0:03:12, time: 0.741, data_time: 0.125, memory: 3952, loss_rpn_cls: 0.0121, loss_rpn_bbox: 0.0125, loss_cls: 0.1000, acc: 96.3542, loss_bbox: 0.1282, loss_mask: 0.1545, loss: 0.4073
2023-02-08 13:59:21,474 - mmdet - INFO - Epoch [6][27/31]	lr: 8.000e-04, eta: 0:03:09, time: 0.724, data_time: 0.122, memory: 3952, loss_rpn_cls: 0.0051, loss_rpn_bbox: 0.0106, loss_cls: 0.0822, acc: 97.3307, loss_bbox: 0.1155, loss_mask: 0.1117, loss: 0.3251
2023-02-08 13:59:23,612 - mmdet - INFO - Epoch [6][30/31]	lr: 8.000e-04, eta: 0:03:05, time: 0.701, data_time: 0.118, memory: 3952, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0057, loss_cls: 0.0370, acc: 98.8932, loss_bbox: 0.0546, loss_mask: 0.0678, loss: 0.1736
2023-02-08 13:59:24,323 - mmdet - INFO - Saving checkpoint at 6 epochs
2023-02-08 13:59:38,586 - mmdet - INFO - Evaluating bbox...
2023-02-08 13:59:38,625 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.728
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.858
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.830
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.653
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.787
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.810
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.810
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.810
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.825
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.850

2023-02-08 13:59:38,625 - mmdet - INFO - Evaluating segm...
2023-02-08 13:59:38,669 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.773
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.853
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.853
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.654
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.841
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.834
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.834
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.834
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.825
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.883

2023-02-08 13:59:38,671 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 13:59:38,671 - mmdet - INFO - Epoch(val) [6][13]	bbox_mAP: 0.7280, bbox_mAP_50: 0.8584, bbox_mAP_75: 0.8300, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6527, bbox_mAP_l: 0.7873, bbox_mAP_copypaste: 0.7280 0.8584 0.8300 0.0000 0.6527 0.7873, segm_mAP: 0.7732, segm_mAP_50: 0.8530, segm_mAP_75: 0.8530, segm_mAP_s: 0.0000, segm_mAP_m: 0.6541, segm_mAP_l: 0.8406, segm_mAP_copypaste: 0.7732 0.8530 0.8530 0.0000 0.6541 0.8406
2023-02-08 13:59:50,151 - mmdet - INFO - Epoch [7][3/31]	lr: 8.000e-04, eta: 0:03:08, time: 3.694, data_time: 2.992, memory: 3952, loss_rpn_cls: 0.0031, loss_rpn_bbox: 0.0025, loss_cls: 0.0586, acc: 97.5260, loss_bbox: 0.0445, loss_mask: 0.0637, loss: 0.1723
2023-02-08 13:59:52,389 - mmdet - INFO - Epoch [7][6/31]	lr: 8.000e-04, eta: 0:03:04, time: 0.766, data_time: 0.143, memory: 3952, loss_rpn_cls: 0.0041, loss_rpn_bbox: 0.0092, loss_cls: 0.0665, acc: 97.6562, loss_bbox: 0.0949, loss_mask: 0.1206, loss: 0.2953
2023-02-08 13:59:54,699 - mmdet - INFO - Epoch [7][9/31]	lr: 8.000e-04, eta: 0:03:00, time: 0.769, data_time: 0.134, memory: 3952, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0229, loss_cls: 0.1181, acc: 95.3125, loss_bbox: 0.1682, loss_mask: 0.1549, loss: 0.4812
2023-02-08 13:59:56,808 - mmdet - INFO - Epoch [7][12/31]	lr: 8.000e-04, eta: 0:02:56, time: 0.708, data_time: 0.126, memory: 3952, loss_rpn_cls: 0.0050, loss_rpn_bbox: 0.0154, loss_cls: 0.0755, acc: 96.8424, loss_bbox: 0.1060, loss_mask: 0.1142, loss: 0.3161
2023-02-08 13:59:58,936 - mmdet - INFO - Epoch [7][15/31]	lr: 8.000e-04, eta: 0:02:52, time: 0.706, data_time: 0.116, memory: 3952, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0051, loss_cls: 0.0600, acc: 97.9167, loss_bbox: 0.0808, loss_mask: 0.0948, loss: 0.2519
2023-02-08 14:00:01,174 - mmdet - INFO - Epoch [7][18/31]	lr: 8.000e-04, eta: 0:02:49, time: 0.731, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0134, loss_rpn_bbox: 0.0141, loss_cls: 0.0790, acc: 97.0378, loss_bbox: 0.1152, loss_mask: 0.1165, loss: 0.3381
2023-02-08 14:00:03,364 - mmdet - INFO - Epoch [7][21/31]	lr: 8.000e-04, eta: 0:02:45, time: 0.742, data_time: 0.136, memory: 3952, loss_rpn_cls: 0.0034, loss_rpn_bbox: 0.0045, loss_cls: 0.0419, acc: 98.4375, loss_bbox: 0.0539, loss_mask: 0.0859, loss: 0.1896
2023-02-08 14:00:05,427 - mmdet - INFO - Epoch [7][24/31]	lr: 8.000e-04, eta: 0:02:41, time: 0.687, data_time: 0.121, memory: 3952, loss_rpn_cls: 0.0028, loss_rpn_bbox: 0.0059, loss_cls: 0.0508, acc: 98.2422, loss_bbox: 0.0832, loss_mask: 0.0698, loss: 0.2126
2023-02-08 14:00:07,475 - mmdet - INFO - Epoch [7][27/31]	lr: 8.000e-04, eta: 0:02:38, time: 0.694, data_time: 0.121, memory: 3952, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0031, loss_cls: 0.0469, acc: 98.6003, loss_bbox: 0.0586, loss_mask: 0.0673, loss: 0.1846
2023-02-08 14:00:09,620 - mmdet - INFO - Epoch [7][30/31]	lr: 8.000e-04, eta: 0:02:34, time: 0.704, data_time: 0.114, memory: 3952, loss_rpn_cls: 0.0048, loss_rpn_bbox: 0.0095, loss_cls: 0.0730, acc: 97.2331, loss_bbox: 0.0893, loss_mask: 0.0649, loss: 0.2414
2023-02-08 14:00:20,696 - mmdet - INFO - Evaluating bbox...
2023-02-08 14:00:20,728 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.725
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.849
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.817
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.599
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.733
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.867

2023-02-08 14:00:20,729 - mmdet - INFO - Evaluating segm...
2023-02-08 14:00:20,762 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.771
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.842
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.842
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.636
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.844
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.826
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.826
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.826
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.783
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.886

2023-02-08 14:00:20,764 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 14:00:20,764 - mmdet - INFO - Epoch(val) [7][13]	bbox_mAP: 0.7248, bbox_mAP_50: 0.8493, bbox_mAP_75: 0.8169, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.5991, bbox_mAP_l: 0.7999, bbox_mAP_copypaste: 0.7248 0.8493 0.8169 0.0000 0.5991 0.7999, segm_mAP: 0.7708, segm_mAP_50: 0.8424, segm_mAP_75: 0.8424, segm_mAP_s: 0.0000, segm_mAP_m: 0.6363, segm_mAP_l: 0.8442, segm_mAP_copypaste: 0.7708 0.8424 0.8424 0.0000 0.6363 0.8442
2023-02-08 14:00:32,426 - mmdet - INFO - Epoch [8][3/31]	lr: 8.000e-04, eta: 0:02:35, time: 3.774, data_time: 3.050, memory: 3952, loss_rpn_cls: 0.0051, loss_rpn_bbox: 0.0188, loss_cls: 0.1063, acc: 95.9310, loss_bbox: 0.1486, loss_mask: 0.1029, loss: 0.3817
2023-02-08 14:00:34,506 - mmdet - INFO - Epoch [8][6/31]	lr: 8.000e-04, eta: 0:02:31, time: 0.689, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0015, loss_rpn_bbox: 0.0082, loss_cls: 0.0647, acc: 97.3307, loss_bbox: 0.0645, loss_mask: 0.0847, loss: 0.2236
2023-02-08 14:00:36,613 - mmdet - INFO - Epoch [8][9/31]	lr: 8.000e-04, eta: 0:02:28, time: 0.716, data_time: 0.126, memory: 3952, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0082, loss_cls: 0.0813, acc: 97.0052, loss_bbox: 0.1057, loss_mask: 0.0943, loss: 0.2977
2023-02-08 14:00:38,838 - mmdet - INFO - Epoch [8][12/31]	lr: 8.000e-04, eta: 0:02:24, time: 0.730, data_time: 0.112, memory: 3952, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0082, loss_cls: 0.0746, acc: 96.8750, loss_bbox: 0.0851, loss_mask: 0.1031, loss: 0.2788
2023-02-08 14:00:40,998 - mmdet - INFO - Epoch [8][15/31]	lr: 8.000e-04, eta: 0:02:21, time: 0.735, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0051, loss_rpn_bbox: 0.0044, loss_cls: 0.0525, acc: 98.2096, loss_bbox: 0.0892, loss_mask: 0.0709, loss: 0.2221
2023-02-08 14:00:43,159 - mmdet - INFO - Epoch [8][18/31]	lr: 8.000e-04, eta: 0:02:17, time: 0.695, data_time: 0.111, memory: 3952, loss_rpn_cls: 0.0043, loss_rpn_bbox: 0.0090, loss_cls: 0.0702, acc: 97.0378, loss_bbox: 0.0689, loss_mask: 0.0628, loss: 0.2152
2023-02-08 14:00:45,229 - mmdet - INFO - Epoch [8][21/31]	lr: 8.000e-04, eta: 0:02:13, time: 0.700, data_time: 0.131, memory: 3952, loss_rpn_cls: 0.0025, loss_rpn_bbox: 0.0032, loss_cls: 0.0324, acc: 98.8932, loss_bbox: 0.0511, loss_mask: 0.0812, loss: 0.1704
2023-02-08 14:00:47,378 - mmdet - INFO - Epoch [8][24/31]	lr: 8.000e-04, eta: 0:02:10, time: 0.716, data_time: 0.130, memory: 3952, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0137, loss_cls: 0.0745, acc: 97.4609, loss_bbox: 0.0869, loss_mask: 0.1052, loss: 0.2926
2023-02-08 14:00:49,431 - mmdet - INFO - Epoch [8][27/31]	lr: 8.000e-04, eta: 0:02:07, time: 0.686, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0227, loss_rpn_bbox: 0.0072, loss_cls: 0.0553, acc: 98.2747, loss_bbox: 0.0541, loss_mask: 0.0705, loss: 0.2099
2023-02-08 14:00:51,454 - mmdet - INFO - Epoch [8][30/31]	lr: 8.000e-04, eta: 0:02:03, time: 0.684, data_time: 0.125, memory: 3952, loss_rpn_cls: 0.0040, loss_rpn_bbox: 0.0088, loss_cls: 0.0531, acc: 97.6888, loss_bbox: 0.0663, loss_mask: 0.0962, loss: 0.2285
2023-02-08 14:01:02,698 - mmdet - INFO - Evaluating bbox...
2023-02-08 14:01:02,726 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.736
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.864
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.833
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.668
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.795
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.758
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.858

2023-02-08 14:01:02,726 - mmdet - INFO - Evaluating segm...
2023-02-08 14:01:02,758 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.777
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.857
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.857
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.667
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.842
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.767
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.883

2023-02-08 14:01:02,760 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 14:01:02,760 - mmdet - INFO - Epoch(val) [8][13]	bbox_mAP: 0.7359, bbox_mAP_50: 0.8640, bbox_mAP_75: 0.8330, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6684, bbox_mAP_l: 0.7953, bbox_mAP_copypaste: 0.7359 0.8640 0.8330 0.0000 0.6684 0.7953, segm_mAP: 0.7769, segm_mAP_50: 0.8569, segm_mAP_75: 0.8569, segm_mAP_s: 0.0000, segm_mAP_m: 0.6673, segm_mAP_l: 0.8424, segm_mAP_copypaste: 0.7769 0.8569 0.8569 0.0000 0.6673 0.8424
2023-02-08 14:01:13,957 - mmdet - INFO - Epoch [9][3/31]	lr: 8.000e-05, eta: 0:02:02, time: 3.612, data_time: 2.922, memory: 3952, loss_rpn_cls: 0.0016, loss_rpn_bbox: 0.0023, loss_cls: 0.0496, acc: 98.0469, loss_bbox: 0.0561, loss_mask: 0.0968, loss: 0.2065
2023-02-08 14:01:16,206 - mmdet - INFO - Epoch [9][6/31]	lr: 8.000e-05, eta: 0:01:59, time: 0.732, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0022, loss_rpn_bbox: 0.0024, loss_cls: 0.0311, acc: 98.8281, loss_bbox: 0.0290, loss_mask: 0.0552, loss: 0.1199
2023-02-08 14:01:18,532 - mmdet - INFO - Epoch [9][9/31]	lr: 8.000e-05, eta: 0:01:56, time: 0.801, data_time: 0.146, memory: 3952, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0064, loss_cls: 0.0666, acc: 97.3958, loss_bbox: 0.1015, loss_mask: 0.0776, loss: 0.2594
2023-02-08 14:01:20,741 - mmdet - INFO - Epoch [9][12/31]	lr: 8.000e-05, eta: 0:01:52, time: 0.744, data_time: 0.118, memory: 3952, loss_rpn_cls: 0.0024, loss_rpn_bbox: 0.0062, loss_cls: 0.0479, acc: 98.2096, loss_bbox: 0.0527, loss_mask: 0.0657, loss: 0.1749
2023-02-08 14:01:22,916 - mmdet - INFO - Epoch [9][15/31]	lr: 8.000e-05, eta: 0:01:49, time: 0.715, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0067, loss_rpn_bbox: 0.0127, loss_cls: 0.0677, acc: 97.8190, loss_bbox: 0.0783, loss_mask: 0.0867, loss: 0.2521
2023-02-08 14:01:25,079 - mmdet - INFO - Epoch [9][18/31]	lr: 8.000e-05, eta: 0:01:46, time: 0.720, data_time: 0.128, memory: 3952, loss_rpn_cls: 0.0027, loss_rpn_bbox: 0.0134, loss_cls: 0.0964, acc: 95.5729, loss_bbox: 0.1353, loss_mask: 0.1293, loss: 0.3771
2023-02-08 14:01:27,391 - mmdet - INFO - Epoch [9][21/31]	lr: 8.000e-05, eta: 0:01:42, time: 0.752, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0057, loss_rpn_bbox: 0.0070, loss_cls: 0.0608, acc: 98.1445, loss_bbox: 0.0839, loss_mask: 0.1003, loss: 0.2578
2023-02-08 14:01:29,598 - mmdet - INFO - Epoch [9][24/31]	lr: 8.000e-05, eta: 0:01:39, time: 0.752, data_time: 0.143, memory: 3952, loss_rpn_cls: 0.0068, loss_rpn_bbox: 0.0090, loss_cls: 0.0650, acc: 97.4284, loss_bbox: 0.0762, loss_mask: 0.0784, loss: 0.2353
2023-02-08 14:01:31,751 - mmdet - INFO - Epoch [9][27/31]	lr: 8.000e-05, eta: 0:01:36, time: 0.730, data_time: 0.129, memory: 3952, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0191, loss_cls: 0.1145, acc: 95.5078, loss_bbox: 0.1380, loss_mask: 0.0985, loss: 0.3781
2023-02-08 14:01:34,328 - mmdet - INFO - Epoch [9][30/31]	lr: 8.000e-05, eta: 0:01:33, time: 0.834, data_time: 0.111, memory: 3952, loss_rpn_cls: 0.0046, loss_rpn_bbox: 0.0087, loss_cls: 0.0558, acc: 98.0794, loss_bbox: 0.0633, loss_mask: 0.0800, loss: 0.2124
2023-02-08 14:01:35,089 - mmdet - INFO - Saving checkpoint at 9 epochs
2023-02-08 14:01:46,787 - mmdet - INFO - Evaluating bbox...
2023-02-08 14:01:46,814 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.737
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.866
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.838
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.688
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.793
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.833
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.853

2023-02-08 14:01:46,815 - mmdet - INFO - Evaluating segm...
2023-02-08 14:01:46,847 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.784
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.862
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.862
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.676
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.846
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.825
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.886

2023-02-08 14:01:46,849 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 14:01:46,849 - mmdet - INFO - Epoch(val) [9][13]	bbox_mAP: 0.7374, bbox_mAP_50: 0.8661, bbox_mAP_75: 0.8381, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6877, bbox_mAP_l: 0.7930, bbox_mAP_copypaste: 0.7374 0.8661 0.8381 0.0000 0.6877 0.7930, segm_mAP: 0.7835, segm_mAP_50: 0.8621, segm_mAP_75: 0.8621, segm_mAP_s: 0.0000, segm_mAP_m: 0.6761, segm_mAP_l: 0.8460, segm_mAP_copypaste: 0.7835 0.8621 0.8621 0.0000 0.6761 0.8460
2023-02-08 14:01:58,392 - mmdet - INFO - Epoch [10][3/31]	lr: 8.000e-05, eta: 0:01:31, time: 3.713, data_time: 2.945, memory: 3952, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0070, loss_cls: 0.0574, acc: 97.7539, loss_bbox: 0.0513, loss_mask: 0.0662, loss: 0.1902
2023-02-08 14:02:00,837 - mmdet - INFO - Epoch [10][6/31]	lr: 8.000e-05, eta: 0:01:28, time: 0.825, data_time: 0.149, memory: 3952, loss_rpn_cls: 0.0051, loss_rpn_bbox: 0.0124, loss_cls: 0.0494, acc: 98.2422, loss_bbox: 0.0583, loss_mask: 0.0630, loss: 0.1882
2023-02-08 14:02:03,523 - mmdet - INFO - Epoch [10][9/31]	lr: 8.000e-05, eta: 0:01:25, time: 0.901, data_time: 0.138, memory: 3952, loss_rpn_cls: 0.0046, loss_rpn_bbox: 0.0131, loss_cls: 0.0916, acc: 96.5169, loss_bbox: 0.1016, loss_mask: 0.0883, loss: 0.2991
2023-02-08 14:02:06,226 - mmdet - INFO - Epoch [10][12/31]	lr: 8.000e-05, eta: 0:01:21, time: 0.808, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0021, loss_rpn_bbox: 0.0039, loss_cls: 0.0439, acc: 98.3398, loss_bbox: 0.0690, loss_mask: 0.0670, loss: 0.1860
2023-02-08 14:02:08,841 - mmdet - INFO - Epoch [10][15/31]	lr: 8.000e-05, eta: 0:01:18, time: 0.940, data_time: 0.219, memory: 3952, loss_rpn_cls: 0.0042, loss_rpn_bbox: 0.0064, loss_cls: 0.0470, acc: 98.4049, loss_bbox: 0.0538, loss_mask: 0.0658, loss: 0.1771
2023-02-08 14:02:11,012 - mmdet - INFO - Epoch [10][18/31]	lr: 8.000e-05, eta: 0:01:15, time: 0.754, data_time: 0.152, memory: 3952, loss_rpn_cls: 0.0044, loss_rpn_bbox: 0.0090, loss_cls: 0.0814, acc: 97.2982, loss_bbox: 0.1080, loss_mask: 0.0971, loss: 0.2999
2023-02-08 14:02:13,117 - mmdet - INFO - Epoch [10][21/31]	lr: 8.000e-05, eta: 0:01:12, time: 0.709, data_time: 0.122, memory: 3952, loss_rpn_cls: 0.0035, loss_rpn_bbox: 0.0089, loss_cls: 0.0702, acc: 97.5586, loss_bbox: 0.1031, loss_mask: 0.1257, loss: 0.3113
2023-02-08 14:02:15,255 - mmdet - INFO - Epoch [10][24/31]	lr: 8.000e-05, eta: 0:01:09, time: 0.703, data_time: 0.116, memory: 3952, loss_rpn_cls: 0.0027, loss_rpn_bbox: 0.0113, loss_cls: 0.0714, acc: 97.0052, loss_bbox: 0.0989, loss_mask: 0.1342, loss: 0.3185
2023-02-08 14:02:17,413 - mmdet - INFO - Epoch [10][27/31]	lr: 8.000e-05, eta: 0:01:05, time: 0.718, data_time: 0.123, memory: 3952, loss_rpn_cls: 0.0038, loss_rpn_bbox: 0.0039, loss_cls: 0.0598, acc: 97.9818, loss_bbox: 0.0722, loss_mask: 0.0720, loss: 0.2116
2023-02-08 14:02:19,522 - mmdet - INFO - Epoch [10][30/31]	lr: 8.000e-05, eta: 0:01:02, time: 0.699, data_time: 0.123, memory: 3952, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0083, loss_cls: 0.0600, acc: 97.3633, loss_bbox: 0.0646, loss_mask: 0.0738, loss: 0.2143
2023-02-08 14:02:30,202 - mmdet - INFO - Evaluating bbox...
2023-02-08 14:02:30,229 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.740
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.861
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.831
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.675
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.801
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.804
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.804
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.804
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.767
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.861

2023-02-08 14:02:30,230 - mmdet - INFO - Evaluating segm...
2023-02-08 14:02:30,261 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.779
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.854
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.854
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.667
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.846
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.775
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.886

2023-02-08 14:02:30,263 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 14:02:30,263 - mmdet - INFO - Epoch(val) [10][13]	bbox_mAP: 0.7397, bbox_mAP_50: 0.8614, bbox_mAP_75: 0.8309, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6752, bbox_mAP_l: 0.8014, bbox_mAP_copypaste: 0.7397 0.8614 0.8309 0.0000 0.6752 0.8014, segm_mAP: 0.7785, segm_mAP_50: 0.8545, segm_mAP_75: 0.8545, segm_mAP_s: 0.0000, segm_mAP_m: 0.6666, segm_mAP_l: 0.8459, segm_mAP_copypaste: 0.7785 0.8545 0.8545 0.0000 0.6666 0.8459
2023-02-08 14:02:41,571 - mmdet - INFO - Epoch [11][3/31]	lr: 8.000e-05, eta: 0:01:00, time: 3.657, data_time: 2.991, memory: 3952, loss_rpn_cls: 0.0059, loss_rpn_bbox: 0.0092, loss_cls: 0.0742, acc: 97.1354, loss_bbox: 0.1086, loss_mask: 0.1136, loss: 0.3116
2023-02-08 14:02:43,563 - mmdet - INFO - Epoch [11][6/31]	lr: 8.000e-05, eta: 0:00:56, time: 0.663, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0054, loss_rpn_bbox: 0.0087, loss_cls: 0.0469, acc: 98.2747, loss_bbox: 0.0567, loss_mask: 0.0960, loss: 0.2137
2023-02-08 14:02:45,677 - mmdet - INFO - Epoch [11][9/31]	lr: 8.000e-05, eta: 0:00:53, time: 0.690, data_time: 0.119, memory: 3952, loss_rpn_cls: 0.0023, loss_rpn_bbox: 0.0062, loss_cls: 0.0329, acc: 98.8932, loss_bbox: 0.0474, loss_mask: 0.0586, loss: 0.1474
2023-02-08 14:02:47,853 - mmdet - INFO - Epoch [11][12/31]	lr: 8.000e-05, eta: 0:00:50, time: 0.737, data_time: 0.136, memory: 3952, loss_rpn_cls: 0.0022, loss_rpn_bbox: 0.0098, loss_cls: 0.0741, acc: 97.0703, loss_bbox: 0.0989, loss_mask: 0.0903, loss: 0.2752
2023-02-08 14:02:50,015 - mmdet - INFO - Epoch [11][15/31]	lr: 8.000e-05, eta: 0:00:47, time: 0.716, data_time: 0.123, memory: 3952, loss_rpn_cls: 0.0021, loss_rpn_bbox: 0.0063, loss_cls: 0.0651, acc: 97.4609, loss_bbox: 0.0838, loss_mask: 0.0741, loss: 0.2315
2023-02-08 14:02:52,195 - mmdet - INFO - Epoch [11][18/31]	lr: 8.000e-05, eta: 0:00:44, time: 0.726, data_time: 0.133, memory: 3952, loss_rpn_cls: 0.0101, loss_rpn_bbox: 0.0131, loss_cls: 0.0483, acc: 98.5677, loss_bbox: 0.0551, loss_mask: 0.0705, loss: 0.1971
2023-02-08 14:02:54,359 - mmdet - INFO - Epoch [11][21/31]	lr: 8.000e-05, eta: 0:00:41, time: 0.722, data_time: 0.127, memory: 3952, loss_rpn_cls: 0.0033, loss_rpn_bbox: 0.0038, loss_cls: 0.0380, acc: 98.5677, loss_bbox: 0.0445, loss_mask: 0.0524, loss: 0.1418
2023-02-08 14:02:56,574 - mmdet - INFO - Epoch [11][24/31]	lr: 8.000e-05, eta: 0:00:37, time: 0.749, data_time: 0.129, memory: 3952, loss_rpn_cls: 0.0066, loss_rpn_bbox: 0.0085, loss_cls: 0.0772, acc: 96.7122, loss_bbox: 0.0862, loss_mask: 0.0826, loss: 0.2611
2023-02-08 14:02:58,812 - mmdet - INFO - Epoch [11][27/31]	lr: 8.000e-05, eta: 0:00:34, time: 0.738, data_time: 0.122, memory: 3952, loss_rpn_cls: 0.0047, loss_rpn_bbox: 0.0129, loss_cls: 0.0845, acc: 96.6471, loss_bbox: 0.0927, loss_mask: 0.1138, loss: 0.3086
2023-02-08 14:03:01,043 - mmdet - INFO - Epoch [11][30/31]	lr: 8.000e-05, eta: 0:00:31, time: 0.754, data_time: 0.128, memory: 3952, loss_rpn_cls: 0.0046, loss_rpn_bbox: 0.0117, loss_cls: 0.0756, acc: 97.0052, loss_bbox: 0.1035, loss_mask: 0.1212, loss: 0.3166
2023-02-08 14:03:12,227 - mmdet - INFO - Evaluating bbox...
2023-02-08 14:03:12,254 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.736
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.863
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.832
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.681
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.794
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.802
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.802
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.802
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.775
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.856

2023-02-08 14:03:12,254 - mmdet - INFO - Evaluating segm...
2023-02-08 14:03:12,286 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.777
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.856
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.856
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.666
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.843
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.767
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.883

2023-02-08 14:03:12,288 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 14:03:12,289 - mmdet - INFO - Epoch(val) [11][13]	bbox_mAP: 0.7359, bbox_mAP_50: 0.8627, bbox_mAP_75: 0.8318, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6809, bbox_mAP_l: 0.7938, bbox_mAP_copypaste: 0.7359 0.8627 0.8318 0.0000 0.6809 0.7938, segm_mAP: 0.7766, segm_mAP_50: 0.8556, segm_mAP_75: 0.8556, segm_mAP_s: 0.0000, segm_mAP_m: 0.6661, segm_mAP_l: 0.8428, segm_mAP_copypaste: 0.7766 0.8556 0.8556 0.0000 0.6661 0.8428
2023-02-08 14:03:23,811 - mmdet - INFO - Epoch [12][3/31]	lr: 8.000e-06, eta: 0:00:28, time: 3.730, data_time: 3.025, memory: 3952, loss_rpn_cls: 0.0019, loss_rpn_bbox: 0.0047, loss_cls: 0.0491, acc: 98.3073, loss_bbox: 0.0670, loss_mask: 0.0605, loss: 0.1832
2023-02-08 14:03:25,930 - mmdet - INFO - Epoch [12][6/31]	lr: 8.000e-06, eta: 0:00:25, time: 0.702, data_time: 0.125, memory: 3952, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0134, loss_cls: 0.0762, acc: 97.1680, loss_bbox: 0.0892, loss_mask: 0.0887, loss: 0.2774
2023-02-08 14:03:28,041 - mmdet - INFO - Epoch [12][9/31]	lr: 8.000e-06, eta: 0:00:22, time: 0.715, data_time: 0.127, memory: 3952, loss_rpn_cls: 0.0138, loss_rpn_bbox: 0.0095, loss_cls: 0.0711, acc: 97.5260, loss_bbox: 0.0892, loss_mask: 0.1009, loss: 0.2845
2023-02-08 14:03:30,068 - mmdet - INFO - Epoch [12][12/31]	lr: 8.000e-06, eta: 0:00:19, time: 0.666, data_time: 0.111, memory: 3952, loss_rpn_cls: 0.0057, loss_rpn_bbox: 0.0052, loss_cls: 0.0345, acc: 98.9583, loss_bbox: 0.0379, loss_mask: 0.0695, loss: 0.1529
2023-02-08 14:03:32,216 - mmdet - INFO - Epoch [12][15/31]	lr: 8.000e-06, eta: 0:00:16, time: 0.725, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0023, loss_rpn_bbox: 0.0070, loss_cls: 0.0558, acc: 98.0794, loss_bbox: 0.0875, loss_mask: 0.0918, loss: 0.2443
2023-02-08 14:03:34,300 - mmdet - INFO - Epoch [12][18/31]	lr: 8.000e-06, eta: 0:00:13, time: 0.686, data_time: 0.111, memory: 3952, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0063, loss_cls: 0.0518, acc: 98.3073, loss_bbox: 0.0590, loss_mask: 0.0782, loss: 0.2048
2023-02-08 14:03:36,515 - mmdet - INFO - Epoch [12][21/31]	lr: 8.000e-06, eta: 0:00:10, time: 0.741, data_time: 0.123, memory: 3952, loss_rpn_cls: 0.0036, loss_rpn_bbox: 0.0084, loss_cls: 0.0665, acc: 97.2005, loss_bbox: 0.0792, loss_mask: 0.0905, loss: 0.2483
2023-02-08 14:03:38,628 - mmdet - INFO - Epoch [12][24/31]	lr: 8.000e-06, eta: 0:00:06, time: 0.711, data_time: 0.120, memory: 3952, loss_rpn_cls: 0.0061, loss_rpn_bbox: 0.0077, loss_cls: 0.0676, acc: 97.1680, loss_bbox: 0.0732, loss_mask: 0.0670, loss: 0.2216
2023-02-08 14:03:40,813 - mmdet - INFO - Epoch [12][27/31]	lr: 8.000e-06, eta: 0:00:03, time: 0.719, data_time: 0.120, memory: 3952, loss_rpn_cls: 0.0113, loss_rpn_bbox: 0.0160, loss_cls: 0.0751, acc: 96.9076, loss_bbox: 0.0989, loss_mask: 0.1050, loss: 0.3062
2023-02-08 14:03:42,950 - mmdet - INFO - Epoch [12][30/31]	lr: 8.000e-06, eta: 0:00:00, time: 0.722, data_time: 0.124, memory: 3952, loss_rpn_cls: 0.0084, loss_rpn_bbox: 0.0084, loss_cls: 0.0701, acc: 97.8190, loss_bbox: 0.0832, loss_mask: 0.0983, loss: 0.2683
2023-02-08 14:03:43,667 - mmdet - INFO - Saving checkpoint at 12 epochs
2023-02-08 14:03:55,312 - mmdet - INFO - Evaluating bbox...
2023-02-08 14:03:55,340 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.735
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.862
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.831
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.675
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.796
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.802
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.802
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.802
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.767
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.858

2023-02-08 14:03:55,340 - mmdet - INFO - Evaluating segm...
2023-02-08 14:03:55,371 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.776
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.855
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.855
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.666
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.843
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.767
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.883

2023-02-08 14:03:55,373 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2023-02-08 14:03:55,374 - mmdet - INFO - Epoch(val) [12][13]	bbox_mAP: 0.7353, bbox_mAP_50: 0.8623, bbox_mAP_75: 0.8313, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6748, bbox_mAP_l: 0.7956, bbox_mAP_copypaste: 0.7353 0.8623 0.8313 0.0000 0.6748 0.7956, segm_mAP: 0.7763, segm_mAP_50: 0.8553, segm_mAP_75: 0.8553, segm_mAP_s: 0.0000, segm_mAP_m: 0.6661, segm_mAP_l: 0.8428, segm_mAP_copypaste: 0.7763 0.8553 0.8553 0.0000 0.6661 0.8428
